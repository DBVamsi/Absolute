<?php
    require_once __DIR__ . '/core/required/layout_top.php';

    // Redirect if already logged in
    if (isset($_SESSION['EvoChroniclesRPG'])) {
        header("Location: " . DOMAIN_ROOT . "/index.php");
        exit;
    }

    // Initialize view variables
    $view_feedback_message = ['type' => '', 'text' => ''];
    $view_submitted_username = '';
    $view_submitted_email = '';
    // Do NOT re-populate password fields

    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['register_action'])) {
        $Username = $_POST['Username'] ?? '';
        $Password = $_POST['Password'] ?? ''; // Raw password
        $Password_Confirm = $_POST['Password_Confirm'] ?? '';
        $Email = $_POST['Email'] ?? ''; // Raw email
        $Gender = $_POST['Gender'] ?? 'Ungendered'; // Default if not set
        $Avatar_ID = isset($_POST['Avatar']) ? (int)$_POST['Avatar'] : 1;
        $Starter_Pokedex_ID = isset($_POST['Starter']) ? (int)$_POST['Starter'] : 1;

        // Store submitted values for re-populating form (except password)
        $view_submitted_username = htmlspecialchars(Purify($Username), ENT_QUOTES | ENT_HTML5, 'UTF-8');
        $view_submitted_email = htmlspecialchars(Purify($Email), ENT_QUOTES | ENT_HTML5, 'UTF-8');


        // Validation
        $sanitized_username = Purify($Username); // For checks that allow broader chars initially
        $validated_email = filter_var($Email, FILTER_VALIDATE_EMAIL);
        $sanitized_email = $validated_email ? Purify($validated_email) : '';


        if (empty($sanitized_username)) {
            $view_feedback_message = ['type' => 'error', 'text' => 'Please enter a valid username.'];
        } elseif (mb_strlen($sanitized_username) < 3 || mb_strlen($sanitized_username) > 20) {
            $view_feedback_message = ['type' => 'error', 'text' => 'Username must be between 3 and 20 characters.'];
        } elseif ($User_Class->CheckUsernameExists($sanitized_username)) {
            $view_feedback_message = ['type' => 'error', 'text' => 'The username you have chosen is already in use.'];
        } elseif (empty($Password)) {
            $view_feedback_message = ['type' => 'error', 'text' => 'Please enter a password.'];
        } elseif (mb_strlen($Password) < 6) {
            $view_feedback_message = ['type' => 'error', 'text' => 'Password must be at least 6 characters long.'];
        } elseif ($Password !== $Password_Confirm) {
            $view_feedback_message = ['type' => 'error', 'text' => 'The submitted passwords did not match.'];
        } elseif (empty($validated_email)) {
            $view_feedback_message = ['type' => 'error', 'text' => 'Please enter a valid email address.'];
        } elseif ($User_Class->CheckEmailExists($sanitized_email)) {
            $view_feedback_message = ['type' => 'error', 'text' => 'This email address is already registered.'];
        } elseif (!in_array($Gender, ['Female', 'Male', 'Ungendered'])) {
            $view_feedback_message = ['type' => 'error', 'text' => 'Invalid gender selected.'];
        } else {
            // Avatar and Starter ID validation (basic range checks)
            if ($Avatar_ID < 1 || $Avatar_ID > 352) $Avatar_ID = 1; // Default if invalid
            $avatar_path = "/Avatars/Sprites/{$Avatar_ID}.png";

            $valid_starters = [1, 4, 7, 152, 155, 158, 252, 255, 258, 387, 390, 393, 495, 498, 501, 650, 653, 656, 722, 725, 728, 810, 813, 816];
            if (!in_array($Starter_Pokedex_ID, $valid_starters)) $Starter_Pokedex_ID = 1; // Default if invalid

            // Call User_Class->CreateUser (does not create starter)
            $creation_result = $User_Class->CreateUser($sanitized_username, $Password, $sanitized_email, $Gender, $avatar_path);

            if ($creation_result['success']) {
                $new_user_id = $creation_result['user_id'];

                // Starter Pokemon Creation (moved from original direct PDO block)
                if ($Pokemon_Service) { // Check if service is available
                    // GenerateGender and Natures might be static methods on PokemonService or global
                    // For now, assume they are accessible as they were in the original script
                    $starter_gender = PokemonService::GenerateGender($Starter_Pokedex_ID); // Assuming static or accessible

                    // Create the starter Pokemon
                    $starter_creation_result = $Pokemon_Service->CreatePokemon(
                        $new_user_id,
                        $Starter_Pokedex_ID,
                        0, // Alt_ID for starters is usually 0
                        5, // Level
                        'Normal', // Type
                        $starter_gender,
                        'Registration' // Obtained_At
                        // Nature and IVs/EVs will be auto-generated by CreatePokemon if not provided
                    );

                    if ($starter_creation_result && isset($starter_creation_result['PokeID'])) {
                        // Update user's roster with the starter (if CreatePokemon doesn't handle slotting for first Pokemon)
                        // This logic might need adjustment based on how CreatePokemon and roster are managed.
                        // The original code directly updated users.Roster with the new Pokemon's ID.
                        // For now, assuming CreatePokemon handles initial slotting or it's a separate step.
                        // A simplified approach:
                        $update_roster_stmt = $pdo_instance->prepare("UPDATE `users` SET `Roster` = ? WHERE `ID` = ?");
                        $update_roster_stmt->execute([$starter_creation_result['PokeID'], $new_user_id]);

                        $view_feedback_message = ['type' => 'success', 'text' => 'Registration successful! You can now log in. Starter Pokémon has been added to your account.'];
                        // Clear submitted values on success
                        $view_submitted_username = '';
                        $view_submitted_email = '';
                    } else {
                        // User created, but starter Pokemon creation failed. This is problematic.
                        // Log this error, inform user. They might need admin help.
                        $view_feedback_message = ['type' => 'error', 'text' => 'User account created, but failed to add starter Pokémon. Please contact support.'];
                    }
                } else {
                     $view_feedback_message = ['type' => 'error', 'text' => 'User account created, but Pokémon service is unavailable to add starter. Please contact support.'];
                }
            } else {
                $view_feedback_message = ['type' => 'error', 'text' => $creation_result['message']];
            }
        }
    }

    // Path to the view file
    $view_file_path = __DIR__ . '/views/auth/register_view.php';

    if (file_exists($view_file_path)) {
        require_once $view_file_path;
    } else {
        echo "<div class='panel content'><div class='head'>Error</div><div class='body' style='padding: 5px;'>Registration view is currently unavailable.</div></div>";
    }

    require_once __DIR__ . '/core/required/layout_bottom.php';
?>
